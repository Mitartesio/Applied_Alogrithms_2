/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hyperloglogmethod;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.concurrent.ConcurrentHashMap;

public class Hash{

    private static int[] bits;
    private static ConcurrentHashMap<Integer,Integer> map;


    static{
         // File appendix = new File("Appendix1.txt");

        // Scanner myScanner = new Scanner(appendix);

        bits = new int[32];
        String[] lines = "0x21ae4036, 0x32435171, 0xac3338cf, 0xea97b40c, 0x0e504b22, 0x9ff9a4ef, 0x111d014d, 0x934f3787, 0x6cd079bf, 0x69db5c31, 0xdf3c28ed, 0x40daf2ad, 0x82a5891c, 0x4659c7b0, 0x73dc0ca8, 0xdad3aca2, 0x00c74c7e, 0x9a2521e2, 0xf38eb6aa, 0x64711ab6, 0x5823150a, 0xd13a3a9a, 0x30a5aa04, 0x0fb9a1da, 0xef785119, 0xc9f0b067, 0x1e7dde42, 0xdda4a7b2, 0x1a1c2640, 0x297c0633, 0x744edb48, 0x19adce93".split(", ");

        int counter = 0;
        for (String string : lines) {
            String hexString = string;

        // Convert the last 8 hex characters to an unsigned 32-bit integer
            String lastEightHexDigits = hexString.substring(hexString.length() - 8);
            
            int decimalValue = Integer.parseUnsignedInt(lastEightHexDigits, 16);
            bits[counter] = decimalValue;
            counter++;
            
        }
        // myScanner.close();
    }

    public Hash() throws FileNotFoundException{


    }

    public static int hashMethod(int k){
        int finalNumber = 0;
        // int number = k;

        for (int i = 0; i < bits.length; i++) {
            int aNumber = bits[i];
            int bitnumber = aNumber & k;
            // System.out.println(bitnumber);
            
            int leastSignificantBit = Integer.bitCount(bitnumber)&1;

            finalNumber |= (leastSignificantBit << i);

            // System.out.println(finalNumber);

        }
        return finalNumber;
        // return String.format("%08x", finalNumber);

    }

    public void computeHashing(){
        Thread[] threads = new Thread[4];
        int arraySize = 1000000; // total siz
        int chunkSize = arraySize / 4; // size of each chunk
        map = new ConcurrentHashMap<>();

        for (int i = 0; i < threads.length; i++) {
            final int start = i * chunkSize + 1; // start index for this thread
            final int end = (i + 1) * chunkSize; // end index for this thread

    
            threads[i] = new Thread(() -> {
                for (int j = start; j < end; j++) {
                    int number = Rho.functionP(hashMethod(j));
                    map.merge(number, 1, Integer::sum); // Increment atomically
                }
                // System.out.println("Thread completed for range: " + start + " to " + end);
            });
        }

        for (Thread thread : threads) {
            thread.start();
        }
        for (Thread thread2 : threads) {
            try {
                thread2.join();
            } catch (Exception e) {
                // TODO: handle exception
                System.out.println("unusccessfull join");
            }   
        }
    }

    public ConcurrentHashMap<Integer,Integer> getMap(){
        // Not atomic!!! MAke sure  we dont call this until all therads have joined
        return map;
    }

    
    // public static void main(String[] args) throws FileNotFoundException {
        // if("HyperLogLog".equals(args[0])){
        
        // System.out.println("application started");
        // Scanner mySystemScanner = new Scanner(System.in);

        // // make list 1 to a million
        // // then run hash and function to all of them
        // // make a map and update for each to the map. 
        // // for each element output of the function:
        // // check if it exists in the keyset, if it does, increment the assosciated value with 1
        // // otherwise add add with 1


        // //System.out.println("Input number of inputs");
        // int j = mySystemScanner.nextInt();

        // mySystemScanner.nextLine();
        // for (int i = 0; i<j; i++) {
        //     String hexString = mySystemScanner.nextLine().strip();
        //     String lastEightHexDigits = hexString.substring(hexString.length() - 8);
        //     int initNumber = Integer.parseUnsignedInt(lastEightHexDigits,16);
        //     int hashedNumber = hashFunction.hashMethod(initNumber);
        //     int functionPofhashedx = functionP(hashedNumber);
        //     System.out.println(functionPofhashedx);
        // }
        // if("HyperLogLogTest".equals(args[0])){
        // Hash hashFunction = new Hash();
        //     computeHashing();
        // for (Integer number : map.keySet()) {
        //     System.out.println(number + " " + map.get(number));
        //     }
        // }

        // mySystemScanner.close();
    // }

    // }


}